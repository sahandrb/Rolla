@{
    // تعیین عنوان صفحه که در تگ <title> یا بخش‌های دیگر استفاده می‌شود
    ViewData["Title"] = "RiderMapView";

    // تعیین صفحه Layout اصلی که این ویو از آن استفاده می‌کند
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section Styles {

    <style>
        /* تنظیم ابعاد و موقعیت نقشه */
        #map {
            position: absolute;
            top: 0;
            left: 0;
            height: 80vh;
            width: 100vw;
            z-index: 1;
        }
    </style>

    <!-- لینک استایل اصلی کتابخانه Leaflet برای نقشه -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <!-- استایل کنترل موقعیت‌یابی Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />

    <!-- استایل کنترل جستجوی مکان MapTiler -->
    <link rel="stylesheet" href="https://cdn.maptiler.com/maptiler-geocoding-control/v2.1.7/style.css" />

    <style>
        /* تنظیم موقعیت کنترل جستجو در بالای نقشه و وسط صفحه */
        .leaflet-top.leaflet-right {
            top: 10px !important;
            right: 50%;
            transform: translateX(50%);
        }

        /* بزرگ کردن ورودی جستجو با فونت و padding مناسب */
        .maptiler-geocoder-control input {
            height: 48px;
            font-size: 18px;
            padding: 10px 16px;
            border-radius: 8px;
            width: 400px;
            max-width: 90vw; /* حداکثر عرض 90 درصد عرض صفحه */
        }

        /* تنظیم اندازه لیست نتایج جستجو */
        .maptiler-geocoder-results {
            font-size: 16px;
            max-width: 400px;
        }

        /* تغییر موقعیت نقشه به relative برای جلوگیری از تداخل با کنترل‌ها */
        #map {
            position: relative;
        }

        /* بالاترین لایه بودن کنترل جستجو */
        .leaflet-control.maptiler-geocoder-control {
            z-index: 1000;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute; /* یا fixed اگر می‌خوای */
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            box-sizing: border-box;
        }

        #resultNotification {
            transition: opacity 0.5s ease;
        }



    </style>
}

<!--
    بخش اصلی صفحه شامل نقشه و دکمه‌های انتخاب مبدا، مقصد و ذخیره مسیر
-->
<div id="map"></div>


<div class="white-container">
    <div class="top-buttons">
        <!-- دکمه انتخاب مبدا -->
        <button onclick="selectedType='origin'" class="btn btn-outline-primary half-button" id="btnOrigin">انتخاب مبدا</button>

        <!-- دکمه انتخاب مقصد -->
        <button onclick="selectedType='destination'" class="btn btn-outline-primary half-button" id="btnDestination">انتخاب مقصد</button>
    </div>

    <!-- دکمه ذخیره مسیر -->
    <div class="bottom-button-wrapper">
        <button id="saveRouteBtn" class="btn btn-success full-button">ذخیره مسیر</button>
    </div>
</div>


<div id="resultNotification" style="
    display:none;
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: white;
    color: black;
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    font-size: 16px;
    z-index: 9999;
    min-width: 250px;
">
    <strong>نتیجه محاسبه</strong>
    <div id="resultContent"></div>
</div>


<div id="notification" style="
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: snow; /* نارنجی رنگ */
    color: mediumblue;
    padding: 15px 25px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    display: none; /* ابتدا مخفی است */
    z-index: 10000;
    font-weight: 700;  /* اینجا تغییر دادم */
">
    لطفاً ابتدا مبدا را انتخاب کرده، سپس مقصد را مشخص نموده و در نهایت دکمه تأیید را فشار دهید.
</div>



@section Scripts {
    <!-- کتابخانه Leaflet -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>

    <!-- کنترل موقعیت‌یابی Leaflet.locatecontrol -->
    <script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>

    <!-- کنترل جستجوی MapTiler -->
    <script src="https://cdn.maptiler.com/maptiler-geocoding-control/v2.1.7/leaflet.umd.js"></script>

    <script>
        const key = 'JSyPtYpf23JvoxuW2qcO';

        var map = L.map('map').setView([35.6892, 51.3890], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        let markers = [];

        function getIcon(zoom) {
          let size = zoom * 3;
          return L.icon({
            iconUrl: '/wallpaper/101-1015767_map-marker-circle-png.png',
            iconSize: [size, size],
            iconAnchor: [size / 2, size],
            popupAnchor: [0, -size]
          });
        }

        let currentZoom = map.getZoom();

        fetch('/RiderRoute/GetMarkers')
          .then(response => response.json())
          .then(data => {
            L.geoJSON(data, {
              pointToLayer: function (feature, latlng) {
                let marker = L.marker(latlng, {
                  icon: getIcon(currentZoom)
                });
                markers.push(marker);
                return marker;
              }
            }).addTo(map);
          });

        map.on('zoomend', () => {
          let zoom = map.getZoom();
          let icon = getIcon(zoom);
          markers.forEach(marker => marker.setIcon(icon));
        });

        // اضافه کردن کنترل موقعیت‌یابی
        L.control.locate({
            position: 'topleft',
            flyTo: true,
            showPopup: false,
            strings: {
                title: "موقعیت من"
            }
        }).addTo(map);

        // کنترل جستجوی MapTiler
        L.control.maptilerGeocoding({
            apiKey: key,
            position: 'topright',
            collapsed: false,
            flyToSelected: false,
            limit: 5
        }).addTo(map);

        let selectedMarker = null;
        let originLatLng = null;
        let destinationLatLng = null;
        let originMarker = null;
        let destinationMarker = null;
        let selectedType = 'origin';

        map.on('click', function (e) {
            const latlng = e.latlng;

            if (selectedType === 'origin') {
                originLatLng = latlng;
                if (originMarker) map.removeLayer(originMarker);
                originMarker = L.marker(latlng).addTo(map).bindPopup("مبدا").openPopup();
            } else {
                destinationLatLng = latlng;
                if (destinationMarker) map.removeLayer(destinationMarker);
                destinationMarker = L.marker(latlng).addTo(map).bindPopup("مقصد").openPopup();
            }
        });

        map.locate({
            setView: true,
            maxZoom: 16,
            timeout: 20000,
            watch: false,
            enableHighAccuracy: true
        });

        map.on('locationerror', function(e) {
            alert("موقعیت‌یابی امکان‌پذیر نیست: " + e.message);
        });

        document.getElementById("saveRouteBtn").addEventListener("click", function () {
            if (!originLatLng || !destinationLatLng) {
                alert("هر دو نقطه مبدا و مقصد را مشخص کنید.");
                return;
            }

            fetch('/RiderRoute/SaveCoordinates', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    origin: { lat: originLatLng.lat, lng: originLatLng.lng },
                    destination: { lat: destinationLatLng.lat, lng: destinationLatLng.lng }
                })
            })
            .then(res => {
                if (!res.ok) throw new Error("خطا در ذخیره مختصات!");
                return fetch('/Rider/RiderSearch/AcceptMethod', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        originLat: originLatLng.lat,
                        originLon: originLatLng.lng,
                        destLat: destinationLatLng.lat,
                        destLon: destinationLatLng.lng
                    })
                });
            })
            .then(res => res.json())
            .then(data => {
                console.log("داده برگشتی:", data);

                if (!data || typeof data.distanceMeters !== 'number') {
                    throw new Error("مقدار فاصله دریافت نشده یا نامعتبر است.");
                }

                let notification = document.getElementById("resultNotification");
                let resultContent = document.getElementById("resultContent");
                resultContent.innerHTML =
                    `فاصله: ${data.distanceMeters.toFixed(2)} متر<br>` +
                    `هزینه: ${data.cost.toLocaleString()} تومان`;

                notification.style.display = "block";
                notification.style.opacity = "1";

                setTimeout(() => {
                    notification.style.opacity = "0";
                    setTimeout(() => {
                        notification.style.display = "none";
                        window.location.href = "/Rider/RiderSearch/SearchMethod";
                    }, 500);
                }, 4000);
            })
            .catch(err => {
                console.error("خطا:", err);
                alert(err.message || "مشکلی پیش آمد!");
            });
        });

        const btnOrigin = document.getElementById('btnOrigin');
        const btnDestination = document.getElementById('btnDestination');

        btnOrigin.addEventListener('click', function() {
            selectedType = 'origin';
            btnOrigin.classList.add('btn-primary');
            btnOrigin.classList.remove('btn-outline-primary');
            btnDestination.classList.remove('btn-primary');
            btnDestination.classList.add('btn-outline-primary');
        });

        btnDestination.addEventListener('click', function() {
            selectedType = 'destination';
            btnDestination.classList.add('btn-primary');
            btnDestination.classList.remove('btn-outline-primary');
            btnOrigin.classList.remove('btn-primary');
            btnOrigin.classList.add('btn-outline-primary');
        });

        window.addEventListener('load', function() {
            setTimeout(() => {
                const notification = document.getElementById('notification');
                notification.style.display = 'block';
                setTimeout(() => {
                    notification.style.display = 'none';
                }, 6000);
            }, 3000);
        });

    </script>
}
